// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace TaskKind {
  export const prefix = (kind: TaskKind) => {
    if (isRun(kind)) {
      return { processing: "Running", done: "Ran", value: "Run" };
    } else if (isBuild(kind)) {
      return { processing: "Building", done: "Built", value: "Build" };
    } else if (isCompile(kind)) {
      return { processing: "Compiling", done: "Compiled", value: "Compile" };
    } else if (isGenerate(kind)) {
      return {
        processing: "Generating",
        done: "Generated",
        value: "Generate",
      };
    }
  };
  export const isRun = (kind: TaskKind) => kind === "Run";
  export const isBuild = (kind: TaskKind) => kind === "Build";
  export const isGenerate = (kind: TaskKind) => kind === "Generate";
  export const isCompile = (kind: TaskKind) => kind === "Compile";
}

// AUTOGENERATED

/**
 * What a given content level is? for whether to log/show it
 */
export type ContentLevel =
  /**
   * Trace Message
   */
  | "Trace"
  /**
   * Debug Message
   */
  | "Debug"
  /**
   * Info Message
   */
  | "Info"
  /**
   * Warn Message
   */
  | "Warn"
  /**
   * Error Message
   */
  | "Error";

/**
 * What kind of task is currently under progress?
 */
export type TaskKind =
  /**
   * Build Task
   */
  | "Build"
  /**
   * Run Task
   */
  | "Run"
  /**
   * Compile Project (maybe setup)
   */
  | "Compile"
  /**
   * Generate xcodeproj
   */
  | "Generate";

/**
 * What the status of task is currently under progress?
 */
export type TaskStatus =
  /**
   * Task Failed,
   */
  | "Failed"
  /**
   * Task Succeeded,
   */
  | "Succeeded"
  /**
   * Processing Task,
   */
  | "Processing";

/**
 * Build Settings used in building/running a target/scheme
 */
export type BuildSettings =
  /**
   * Build Settings used in building/running a target/scheme
   */
  {
    /**
     * Target to build
     */
    target: string;
    /**
     * Configuration to build with, default Debug
     */
    configuration: string;
    /**
     * Scheme to build with
     */
    scheme: string | null;
  };

/**
 * Representation of Messages that clients needs to process
 */
export type Message =
  | {
      /**
       * Notify use with a message
       */
      type: "Notify";
      args: { content: string; level: ContentLevel };
    }
  | { type: "Log"; args: { content: string; level: ContentLevel } }
  | {
      /**
       * Open Logger
       */
      type: "OpenLogger";
    }
  | {
      /**
       * Reload Language server
       */
      type: "ReloadLspServer";
    }
  | {
      /**
       * Set Current Task
       */
      type: "SetCurrentTask";
      args: { kind: TaskKind; target: string; status: TaskStatus };
    }
  | {
      /**
       * Update Current Task
       */
      type: "UpdateCurrentTask";
      args: { content: string; level: ContentLevel };
    }
  | { type: "FinishCurrentTask"; args: { status: TaskStatus } }
  | {
      /**
       * Notify client that something is being watched
       */
      type: "SetWatching";
      args: { watching: boolean; settings: BuildSettings };
    };

/**
 * Target specfic information
 */
export type TargetInfo =
  /**
   * Target specfic information
   */
  { platform: string };
export type ProjectInfo = {
  /**
   * Get watched configurations for given root
   */
  watchlist: string[];
  /**
   * Get targets information for a registers project with a given root
   */
  targets: Record<string, TargetInfo>;
};

/**
 * Device Lookup information to run built project with
 */
export type DeviceLookup =
  /**
   * Device Lookup information to run built project with
   */
  { name: string; id: string };

/**
 * Represntaiton of Project runners index by Platfrom
 */
export type Runners = Record<string, DeviceLookup[]>;

/**
 * Type of operation for building/ruuning a target/scheme
 */
export type Operation = "Watch" | "Stop" | "Once";
export type JSONValue =
  | null
  | boolean
  | number
  | string
  | JSONValue[]
  | { [key: string]: JSONValue };

/**
 * Server Error due to failure while processing a `Request
 */
export type ServerError =
  /**
   * Server Error due to failure while processing a `Request
   */
  { kind: string; msg: string };

/**
 * Server Response
 */
export type Response =
  /**
   * Server Response
   */
  { data?: JSONValue; error?: ServerError };

/**
 * Register a project root
 */
export type RegisterRequest =
  /**
   * Register a project root
   */
  { root: string };

/**
 * Request to build a particular project
 */
export type BuildRequest =
  /**
   * Request to build a particular project
   */
  { root: string; settings: BuildSettings; operation: Operation };

/**
 * Request to Run a particular project.
 */
export type RunRequest =
  /**
   * Request to Run a particular project.
   */
  {
    root: string;
    settings: BuildSettings;
    device?: DeviceLookup | null;
    operation: Operation;
  };

/**
 * Drop a given set of roots to be dropped (i.e. unregistered)
 */
export type DropRequest =
  /**
   * Drop a given set of roots to be dropped (i.e. unregistered)
   */
  { roots: string[] };

/**
 * Request to Get `ProjectInfo`
 */
export type GetProjectInfoRequest =
  /**
   * Request to Get `ProjectInfo`
   */
  { root: string };

/**
 * Requests clinets can make
 */
export type Request =
  | {
      /**
       * Register project root and get broadcaster reader file description
       */
      method: "register";
      args: RegisterRequest;
    }
  | {
      /**
       * Build Project and get path to where to build log will be located
       */
      method: "build";
      args: BuildRequest;
    }
  | {
      /**
       * Run Project and get path to where to Runtime log will be located
       */
      method: "run";
      args: RunRequest;
    }
  | {
      /**
       * Drop projects at a given roots
       */
      method: "drop";
      args: DropRequest;
    }
  | {
      /**
       * Get available runners
       */
      method: "get_runners";
    }
  | {
      /**
       * Get project info that might change between calls, like targets or watchlist
       */
      method: "get_project_info";
      args: GetProjectInfoRequest;
    };
